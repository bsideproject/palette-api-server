extend type Query {
    diaries(pageInput: PageInput): [Diary]!
    histories(diaryId: Long, pageInput: PageInput): [History]!
    pages(pageInput: PageInput): Boolean
}

extend type Mutation {
    createDiary(createDiaryInput: CreateDiaryInput): CreateDiaryOutput
    inviteDiary(inviteDiaryInput: InviteDiaryInput): InviteDiaryOutput
    createHistory(createHistoryInput: CreateHistoryInput): CreateHistoryOutput
    createPage(createPageInput: CreatePageInput): Page
    updateDiary(updateDiaryInput: UpdateDiaryInput): Boolean
    outDiary(outDiaryInput: OutDiaryInput): Boolean
    deletePage(deletePageInput: DeletePageInput): Boolean
    editPage(editPageInput: EditPageInput): Page
}

extend type Query {
    page(pageQueryInput: PageQueryInput): Page
}

input CreateDiaryInput {
    title: String!
    colorId: Long!
}

type CreateDiaryOutput{
    title: String
    invitationCode: String
    color: String
}

input InviteDiaryInput {
    invitationCode: String!
}

type InviteDiaryOutput{
    adminUser: User!
    diary: Diary!
}

input CreateHistoryInput {
    diaryId: Long!
    period: Int!
}

type CreateHistoryOutput{
    historyId: Long!
}

input CreatePageInput {
    title: String!
    body: String
    historyId: Long!
    imageUrls: [String]
}

input PageQueryInput {
    id: Long!
}

input UpdateDiaryInput {
    diaryId: Long!
    colorId: Long
    title: String
}

input OutDiaryInput {
    diaryId: Long!
}

input PageInput {
    diaryOffset: Int
    diarySize: Int
    historyOffset: Int
    historySize: Int
    pageOffset: Int
    pageSize: Int
}

input DeletePageInput {
    pageId: Long!
}

input EditPageInput {
    pageId: Long!
    title: String!
    body: String
    imageUrls: [String]
}