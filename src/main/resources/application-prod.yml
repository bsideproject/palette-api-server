spring:
  config:
    activate:
      on-profile: prod
    import: 'aws-parameterstore:'

  # ===============================
  # = jpa
  # ===============================
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: none
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        format_sql: false
        default_batch_fetch_size: 1000

  # ===============================
  # = database
  # ===============================
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${mysql.url} # 파라미터 스토어
    username: ${mysql.username} # 파라미터 스토어
    password: ${mysql.password} # 파라미터 스토어

# ===============================
# = aws
# ==============================
aws:
  paramstore:
    enabled: true
    prefix: /config
    profile-separator: '-'
    name: app-palette
    fail-fast: false

# ===============================
# = p6spy
# ===============================
decorator:
  datasource:
    p6spy:
      enable-logging: false

# ===============================
# = sentry
# ===============================
sentry:
  dsn: ${sentry.dns}
  traces-sample-rate: 1.0 # 성능 모니터링을 위해 100% 트랜잭션을 캡처하려면 trace-sample-rate를 1.0으로 설정합니다.
  logging:
    minimum-breadcrumb-level: warn
    minimum-event-level: warn # info또는 그 이상으로 로그 메시지를 이동 경로로 포함합니다.
    enabled: true
  environment: prod

# ===============================
# = actuator, prometheus
# ===============================
management:
  metrics:
    tags:
      application: 'prod-api-server'

# ===============================
# = eureka
# ===============================
eureka:
  instance:
    #    hostname: ${HOSTNAME} # 각 서버의 IP
    prefer-ip-address: true
  client:
    serviceUrl:
      defaultZone: ${eureka.url}
    fetch-registry: true
    register-with-eureka: true

# ===============================
# = server config
# ===============================
server:
  port: ${PORT:8082}